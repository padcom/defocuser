(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{152:function(e,t,a){"use strict";a.r(t);var s=a(0),o=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction","aria-hidden":"true"}},[e._v("#")]),e._v(" Introduction")]),a("p",[e._v("It has been way too many times when I implemented (with greater or lesser success) automated way\nfor closing dropdowns when clicking outside of them or by pressing the Escape key. This utility\nis a way for me to stop repeating myself and have it working always the way it should.")]),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Usage")]),a("p",[e._v("Let's assume you have an element on the page that acts as a popup, modal or dropdown of some kind.\nThose elements usually go away once the user clicks outside of them or presses the "),a("code",[e._v("Escape")]),e._v(" key.")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div id="popup">\n  Lorem ipsum...\n</div>\n\n')])])]),a("p",[e._v("That is where "),a("code",[e._v("Defocuser")]),e._v(" comes in. First you need to import it as a dependency. That can be done\neither directly using a "),a("code",[e._v("<script>")]),e._v(" tag:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script src="https://unpkg.com/defocuser"><\/script>\n')])])]),a("p",[e._v("or (if you're using some kind of build system like Webpack or Rollup) as an NPM dependency:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save-dev defocuser\n")])])]),a("p",[e._v("and then import it in your source like this:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import Defocuser from 'defocuser'\n")])])]),a("p",[e._v("Once you have decided which way you want to include it create an instance of "),a("code",[e._v("Defocuser")]),e._v(" and add the root element of your dialog/popup/dropdown,\nselect the phase the callback should be called and provide the actual callback itself:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const popup = document.querySelector('#popup')\nconst defocuser = new Defocuser()\ndefocuser.addElement(, 'bubbling', () => { popup.remove() })\n")])])]),a("p",[e._v("Please note the callback calls "),a("code",[e._v("remove()")]),e._v(" on the popup effectively removing it from the DOM tree.\nDefocuser interally uses "),a("code",[e._v("MutationObserver")]),e._v(" and once it detects that the added node is removed\nit is also removed from the internal state of defocuser.")]),a("p",[e._v("It works this way because "),a("code",[e._v("Defocuser")]),e._v(" is ready for stacked elements!\nThis means that if you have a modal that has a set of dropdowns that maybe have some other popups\n"),a("code",[e._v("Defocuser")]),e._v(" keeps tracl of all those elements and closes only the recent one! Just like you would expect!")]),a("h2",{attrs:{id:"special-case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special-case","aria-hidden":"true"}},[e._v("#")]),e._v(" Special case")]),a("p",[e._v("Sometimes there is more than one element that you would like to treat as part of your dialog.\nLet's examine the following case:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<span id="input">My input</span>\n<ul id="options">\n  <li>Option 1</li>\n  <li>Option 2</li>\n  <li>Option 3</li>\n</ul>\n')])])]),a("p",[e._v("This if structure is dynamic and the element that actiones the dropdown is static you can set it to be\nalso taken into account when tracking user interactions:")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const dropdown = document.querySelector('#options')\nconst secondary = document.querySelector('#input')\ndefocuser.setSecondaryElement(dropdown, secondary)\n")])])]),a("p",[e._v("This way when "),a("code",[e._v("defocuser")]),e._v(" checks if the click happened outside of your dropdown it will also take the "),a("code",[e._v("secondary")]),e._v(" element into account\nas though it would be inside of your dropdown.")]),a("p",[e._v("It is especially usefull when your "),a("code",[e._v("input")]),e._v(" steers some part of your dropdown (like selecting start and end date of a period of time).")]),a("h2",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks","aria-hidden":"true"}},[e._v("#")]),e._v(" Remarks")]),a("p",[e._v("The "),a("code",[e._v("Defocuser")]),e._v(" uses "),a("code",[e._v("MutationObserver")]),e._v(" to detect when the element has been removed from\nthe DOM. So you should physically remove the element to clean things up.")])])}],!1,null,null,null);t.default=o.exports}}]);